"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||s[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},76647:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={},p="API Dump (Static)",u={type:"mdx",permalink:"/api-dump-static/",source:"@site/pages/index.md"},c=[],s={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"api-dump-static"},"API Dump (Static)"),(0,o.kt)("p",null,"A library that provides static Roblox API dumps."),(0,o.kt)("p",null,"API dumps are updated when Roblox updates and you pull a new version of the package."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://corecii.github.io/api-dump-static/"},"Documentation")),(0,o.kt)("p",null,"Install with ",(0,o.kt)("a",{parentName:"p",href:"https://wally.run"},"wally"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'# wally.toml\n[dependencies]\nApiDumpStatic = "corecii/api-dump-static@^1.0"\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/Corecii/api-dump-static/releases/latest"},"or use a packaged release model")),(0,o.kt)("p",null,"When using Wally, ",(0,o.kt)("inlineCode",{parentName:"p"},"wally install")," will automatically grab the newest version by default.\nThis is because we only update the ",(0,o.kt)("em",{parentName:"p"},"patch")," version for API dump changes, and by default\nwally grabs the newest version that isn't a breaking change."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The primary advantages that this package provides over including the raw API dump in your project are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the dump is pre-processed into multiple files so that it syncs in with Rojo correctly"),(0,o.kt)("li",{parentName:"ul"},"the dump is automatically generated when Roblox updates"),(0,o.kt)("li",{parentName:"ul"},"methods to get all members of a class are provided, where the raw API dump requires you to get the superclass members yourself")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"This package allows you to inspect instances at runtime without having to download the API dump with HttpService."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local ApiDump = require(game.ReplicatedStorage.Packages.ApiDumpStatic)\n\nlocal thing = workspace.Baseplate\n\nlocal thingApi = ApiDump.Classes[thing.ClassName]\n\nfor name, info in pairs(thingApi:Properties()) do\n    if info.Security == "None" or info.Security.Read == "None" and not table.find(info.Tags or {}, "NotScriptable") then\n      print("Property", name, "of", thing:GetFullName(),"=", thing[name])\n    end\nend\n')),(0,o.kt)("p",null,"The API is fairly light. It's just a wrapper around ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/MaximumADHD/Roblox-Client-Tracker/blob/roblox/API-Dump.json"},"Roblox-Client-Tracker/API-Dump.json")," with nice methods for getting ",(0,o.kt)("em",{parentName:"p"},"all")," members of a class (incl. of superclasses) and caching generated members lists. As such, it follows naming conventions of ",(0,o.kt)("em",{parentName:"p"},"Mini-API-Dump.json")," for external access (i.e. UpperCamelCase / PascalCase for everything)."),(0,o.kt)("p",null,"The raw API dump can be accessed using ",(0,o.kt)("inlineCode",{parentName:"p"},"ApiDump.Raw"),". This is equivalent to loading ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/MaximumADHD/Roblox-Client-Tracker/blob/roblox/API-Dump.json"},"Roblox-Client-Tracker/API-Dump.json")," directly."))}m.isMDXComponent=!0}}]);